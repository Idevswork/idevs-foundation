name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore Idevs.Foundation.sln
    
    - name: Build solution
      run: dotnet build Idevs.Foundation.sln --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test Idevs.Foundation.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/*.trx'
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./coverage

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-version: ${{ steps.version.outputs.package-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1
      with:
        versionSpec: '5.x'
    
    - name: Determine Version
      id: version
      uses: gittools/actions/gitversion/execute@v1
      with:
        useConfigFile: true
    
    - name: Restore dependencies
      run: dotnet restore Idevs.Foundation.sln
    
    - name: Build consolidated package
      run: |
        dotnet build src/Idevs.Foundation/Idevs.Foundation.csproj \
          --configuration Release \
          --no-restore \
          -p:Version=${{ steps.version.outputs.assemblySemVer }} \
          -p:PackageVersion=${{ steps.version.outputs.nuGetVersionV2 }} \
          -p:AssemblyVersion=${{ steps.version.outputs.assemblySemVer }} \
          -p:FileVersion=${{ steps.version.outputs.assemblySemFileVer }}
    
    - name: Build individual packages
      if: github.ref == 'refs/heads/main' || github.event_name == 'release'
      run: |
        dotnet build --configuration Release \
          --no-restore \
          -p:GenerateIndividualPackages=true \
          -p:Version=${{ steps.version.outputs.assemblySemVer }} \
          -p:PackageVersion=${{ steps.version.outputs.nuGetVersionV2 }} \
          -p:AssemblyVersion=${{ steps.version.outputs.assemblySemVer }} \
          -p:FileVersion=${{ steps.version.outputs.assemblySemFileVer }}
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/*.nupkg
    
    - name: List generated packages
      run: ls -la artifacts/*.nupkg

  publish-preview:
    name: Publish Preview Packages
    runs-on: ubuntu-latest
    needs: [build-and-test, package]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: preview
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish to GitHub Packages (Preview)
      run: |
        dotnet nuget push artifacts/*.nupkg \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --api-key ${{ secrets.NUGET_GITHUB_TOKEN }} \
          --skip-duplicate

  publish-release:
    name: Publish Release Packages
    runs-on: ubuntu-latest
    needs: [build-and-test, package]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish to NuGet.org
      run: |
        dotnet nuget push artifacts/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_IDEVSWORK_API_KEY }} \
          --skip-duplicate
    
    - name: Publish to GitHub Packages
      run: |
        dotnet nuget push artifacts/*.nupkg \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --api-key ${{ secrets.NUGET_GITHUB_TOKEN }} \
          --skip-duplicate

  publish-github-release:
    name: Publish GitHub Release Packages
    runs-on: ubuntu-latest
    needs: [build-and-test, package]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish to NuGet.org (Release)
      run: |
        dotnet nuget push artifacts/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_IDEVSWORK_API_KEY }} \
          --skip-duplicate
    
    - name: Upload packages to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*.nupkg
        generate_release_notes: true
